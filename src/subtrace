-------------------------------------------
Q: Do we have persistent subtraces?

A: Yes, although only those choices that are constrained will be persisted.
   To constrain a choice in a subtrace arbitrarily deeply, each generator
   in the hierarchy needs to expose the element of the sub-trace using an alias.


-------------------------------------------
Q: What about unary generators?

A: Those dont' have meaningful sub-traces to speak of. The sub-traces are basically just 
   values. They don't have any sub-addresses, and they have only one output value.
 

-------------------------------------------
Q: Do we accept addressing into subtraces?

A: No. 

This breaks abstraction barriers, and makes the implementation more complicated.

We want to make such breaks in abstraction explicit (using aliases, see below)


-------------------------------------------
Q: Do we accept aliasing within a program?

tag(alias, name)
..
tag(expr, alias)

A: No. since we at one point computed alias from the name, we could have just
   tagged the name directly.


-------------------------------------------
Q: Do we allow creating an alias, such that all constraints on that alias get turned into
   constraints on a particular sub-trace?

A: Yes. This is how we permit the values of a sub-trace to be exposed as names in the top-level
   trace. It would be possible to alias all 


-------------------------------------------
Q: What data structure implements the trace for a probabilistic program?

A: A trace is a flat map from addresses (Any) to sub-traces (where atomic
   sub-traces are just like values).

   Aliases are dynamically constructed in-line during program execution.
   Aliases map a name to a (sub-trace, sub-address) pair.

   Constraints, interventions, and proposals on aliases are dynamically
   converted into constraints on the sub-trace immediately prior to generating the
   sub-generator on the sub-trace. After generating a sub-trace, all aliased
   values in the sub-trace are also recorded in top-level trace, under the alias name.

   A generator sets the sub-trace, and also returns a value.  The value is usually 
   a representation of some sub-part of the sub-trace. is this enforced? why have two copies
   of the output, one in the trace and one in the output data structure?

        cluster[c] = tag(NIGNJointGenerator(cluster_size[c]), "cluster-$c")

   what is returned?? is it just the sub-trace? no, the sub-trace has extra state, that
   the output does not have, and can have missing values. what is returned is a 
   fully-filled set of exposed values. (does it have to return all the data?)

   suppose that what is returned in a Vector{Float64}. then, we might want to do:

        tag(cluster[c][within_cluster_index], "x-$i")

   instead we create an alias prior to reaching the "cluster-$c" tag:

        tag("x-$i" => ("cluster-$c", within_cluster_index))

   we just have to know that the behavior of the generator is such that

        (<nign-generator-address>, addr) maps to <nign-return-value>[addr]

   this is something that can be documented by the NIGNJointGenerator

   crucially, constraining the sub-trace causes a known effect on the return value,
   that is documented. for example, we can constrain the sub-trace of a joint CRP
   and guarantee that the return value vector of assignments produced during
   regeneration has certain values for the constrained assignments. the meta-programs
   will rely on these invariants relating the sub-trace and the output that are
   implemented by the generator
    

-------------------------------------------
Q: how do we extract values from a sub-trace into a value in the program?

Decision: do not allow deep addressing into subtraces
Decision: allow aliasing, in which a name in a trace is 


